//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace iDiskFileServer.FSServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileServer", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class FileServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _fsdirtoryField;
        
        private string _fshostField;
        
        private int _fsidField;
        
        private string _fspassField;
        
        private System.Nullable<long> _fssizeField;
        
        private System.Nullable<long> _fsvalidsizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fsdirtory {
            get {
                return this._fsdirtoryField;
            }
            set {
                if ((object.ReferenceEquals(this._fsdirtoryField, value) != true)) {
                    this._fsdirtoryField = value;
                    this.RaisePropertyChanged("_fsdirtory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fshost {
            get {
                return this._fshostField;
            }
            set {
                if ((object.ReferenceEquals(this._fshostField, value) != true)) {
                    this._fshostField = value;
                    this.RaisePropertyChanged("_fshost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _fsid {
            get {
                return this._fsidField;
            }
            set {
                if ((this._fsidField.Equals(value) != true)) {
                    this._fsidField = value;
                    this.RaisePropertyChanged("_fsid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fspass {
            get {
                return this._fspassField;
            }
            set {
                if ((object.ReferenceEquals(this._fspassField, value) != true)) {
                    this._fspassField = value;
                    this.RaisePropertyChanged("_fspass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<long> _fssize {
            get {
                return this._fssizeField;
            }
            set {
                if ((this._fssizeField.Equals(value) != true)) {
                    this._fssizeField = value;
                    this.RaisePropertyChanged("_fssize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<long> _fsvalidsize {
            get {
                return this._fsvalidsizeField;
            }
            set {
                if ((this._fsvalidsizeField.Equals(value) != true)) {
                    this._fsvalidsizeField = value;
                    this.RaisePropertyChanged("_fsvalidsize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileList", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class FileList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _fileidField;
        
        private int _serveridField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fileid {
            get {
                return this._fileidField;
            }
            set {
                if ((object.ReferenceEquals(this._fileidField, value) != true)) {
                    this._fileidField = value;
                    this.RaisePropertyChanged("_fileid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _serverid {
            get {
                return this._serveridField;
            }
            set {
                if ((this._serveridField.Equals(value) != true)) {
                    this._serveridField = value;
                    this.RaisePropertyChanged("_serverid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Hch.iDisk.WCF.Contracts", ConfigurationName="FSServices.UserService")]
    public interface UserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/CheckedUser", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/CheckedUserResponse")]
        bool CheckedUser(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/Register", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/RegisterResponse")]
        int Register(iDiskFileServer.FSServices.FileServer fileServer);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/UpdateFileServer", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/UpdateFileServerResponse")]
        bool UpdateFileServer(iDiskFileServer.FSServices.FileServer fileServer);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/Login", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/LoginResponse")]
        iDiskFileServer.FSServices.FileServer Login(int id, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/AddFileList", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/AddFileListResponse")]
        bool AddFileList(iDiskFileServer.FSServices.FileList fileList);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/DeleteFile", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/DeleteFileResponse")]
        bool DeleteFile(string fileId, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserServiceChannel : iDiskFileServer.FSServices.UserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<iDiskFileServer.FSServices.UserService>, iDiskFileServer.FSServices.UserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckedUser(string name, string pass) {
            return base.Channel.CheckedUser(name, pass);
        }
        
        public int Register(iDiskFileServer.FSServices.FileServer fileServer) {
            return base.Channel.Register(fileServer);
        }
        
        public bool UpdateFileServer(iDiskFileServer.FSServices.FileServer fileServer) {
            return base.Channel.UpdateFileServer(fileServer);
        }
        
        public iDiskFileServer.FSServices.FileServer Login(int id, string pass) {
            return base.Channel.Login(id, pass);
        }
        
        public bool AddFileList(iDiskFileServer.FSServices.FileList fileList) {
            return base.Channel.AddFileList(fileList);
        }
        
        public bool DeleteFile(string fileId, string userName) {
            return base.Channel.DeleteFile(fileId, userName);
        }
    }
}
