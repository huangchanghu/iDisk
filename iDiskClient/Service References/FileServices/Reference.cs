//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace iDiskClient.FileServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<int> _diridField;
        
        private System.Nullable<System.DateTime> _fdateField;
        
        private string _fdescField;
        
        private string _fidField;
        
        private string _fnameField;
        
        private System.Nullable<long> _fsizeField;
        
        private string _furlField;
        
        private int _fuseridField;
        
        private System.Nullable<int> _fvisibilityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> _dirid {
            get {
                return this._diridField;
            }
            set {
                if ((this._diridField.Equals(value) != true)) {
                    this._diridField = value;
                    this.RaisePropertyChanged("_dirid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> _fdate {
            get {
                return this._fdateField;
            }
            set {
                if ((this._fdateField.Equals(value) != true)) {
                    this._fdateField = value;
                    this.RaisePropertyChanged("_fdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fdesc {
            get {
                return this._fdescField;
            }
            set {
                if ((object.ReferenceEquals(this._fdescField, value) != true)) {
                    this._fdescField = value;
                    this.RaisePropertyChanged("_fdesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fid {
            get {
                return this._fidField;
            }
            set {
                if ((object.ReferenceEquals(this._fidField, value) != true)) {
                    this._fidField = value;
                    this.RaisePropertyChanged("_fid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _fname {
            get {
                return this._fnameField;
            }
            set {
                if ((object.ReferenceEquals(this._fnameField, value) != true)) {
                    this._fnameField = value;
                    this.RaisePropertyChanged("_fname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<long> _fsize {
            get {
                return this._fsizeField;
            }
            set {
                if ((this._fsizeField.Equals(value) != true)) {
                    this._fsizeField = value;
                    this.RaisePropertyChanged("_fsize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _furl {
            get {
                return this._furlField;
            }
            set {
                if ((object.ReferenceEquals(this._furlField, value) != true)) {
                    this._furlField = value;
                    this.RaisePropertyChanged("_furl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _fuserid {
            get {
                return this._fuseridField;
            }
            set {
                if ((this._fuseridField.Equals(value) != true)) {
                    this._fuseridField = value;
                    this.RaisePropertyChanged("_fuserid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> _fvisibility {
            get {
                return this._fvisibilityField;
            }
            set {
                if ((this._fvisibilityField.Equals(value) != true)) {
                    this._fvisibilityField = value;
                    this.RaisePropertyChanged("_fvisibility");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _uemailField;
        
        private int _uidField;
        
        private string _uloginnameField;
        
        private string _upasswordField;
        
        private string _urealnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _uemail {
            get {
                return this._uemailField;
            }
            set {
                if ((object.ReferenceEquals(this._uemailField, value) != true)) {
                    this._uemailField = value;
                    this.RaisePropertyChanged("_uemail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _uid {
            get {
                return this._uidField;
            }
            set {
                if ((this._uidField.Equals(value) != true)) {
                    this._uidField = value;
                    this.RaisePropertyChanged("_uid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _uloginname {
            get {
                return this._uloginnameField;
            }
            set {
                if ((object.ReferenceEquals(this._uloginnameField, value) != true)) {
                    this._uloginnameField = value;
                    this.RaisePropertyChanged("_uloginname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _upassword {
            get {
                return this._upasswordField;
            }
            set {
                if ((object.ReferenceEquals(this._upasswordField, value) != true)) {
                    this._upasswordField = value;
                    this.RaisePropertyChanged("_upassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _urealname {
            get {
                return this._urealnameField;
            }
            set {
                if ((object.ReferenceEquals(this._urealnameField, value) != true)) {
                    this._urealnameField = value;
                    this.RaisePropertyChanged("_urealname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Dirtory", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class Dirtory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _dirdescField;
        
        private int _diridField;
        
        private string _dirnameField;
        
        private iDiskClient.FileServices.Dirtory[] _dirotoriesField;
        
        private iDiskClient.FileServices.File[] _filesField;
        
        private System.Nullable<int> _parentdiridField;
        
        private int _uidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _dirdesc {
            get {
                return this._dirdescField;
            }
            set {
                if ((object.ReferenceEquals(this._dirdescField, value) != true)) {
                    this._dirdescField = value;
                    this.RaisePropertyChanged("_dirdesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _dirid {
            get {
                return this._diridField;
            }
            set {
                if ((this._diridField.Equals(value) != true)) {
                    this._diridField = value;
                    this.RaisePropertyChanged("_dirid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _dirname {
            get {
                return this._dirnameField;
            }
            set {
                if ((object.ReferenceEquals(this._dirnameField, value) != true)) {
                    this._dirnameField = value;
                    this.RaisePropertyChanged("_dirname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public iDiskClient.FileServices.Dirtory[] _dirotories {
            get {
                return this._dirotoriesField;
            }
            set {
                if ((object.ReferenceEquals(this._dirotoriesField, value) != true)) {
                    this._dirotoriesField = value;
                    this.RaisePropertyChanged("_dirotories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public iDiskClient.FileServices.File[] _files {
            get {
                return this._filesField;
            }
            set {
                if ((object.ReferenceEquals(this._filesField, value) != true)) {
                    this._filesField = value;
                    this.RaisePropertyChanged("_files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> _parentdirid {
            get {
                return this._parentdiridField;
            }
            set {
                if ((this._parentdiridField.Equals(value) != true)) {
                    this._parentdiridField = value;
                    this.RaisePropertyChanged("_parentdirid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _uid {
            get {
                return this._uidField;
            }
            set {
                if ((this._uidField.Equals(value) != true)) {
                    this._uidField = value;
                    this.RaisePropertyChanged("_uid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Hch.iDisk.WCF.Contracts", ConfigurationName="FileServices.FileService")]
    public interface FileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/AddFile", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/AddFileResponse")]
        bool AddFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/DeleteFile", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/DeleteFileResponse")]
        bool DeleteFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/UpdateFile", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/UpdateFileResponse")]
        bool UpdateFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/CheckFileById", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/CheckFileByIdResponse")]
        bool CheckFileById(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/CheckFileByName", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/CheckFileByNameResponse")]
        bool CheckFileByName(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/GetUpLoadUrl", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/GetUpLoadUrlResponse")]
        string GetUpLoadUrl(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/GetDownLoadUrl", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/GetDownLoadUrlResponse")]
        string GetDownLoadUrl(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/QueryFiles", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/QueryFilesResponse")]
        iDiskClient.FileServices.File[] QueryFiles(string where, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/QueryFilesAdmin", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/QueryFilesAdminResponse")]
        iDiskClient.FileServices.File[] QueryFilesAdmin(string where, iDiskClient.FileServices.User user, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/GetFile", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/GetFileResponse")]
        iDiskClient.FileServices.File GetFile(string Id, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/AddDirtory", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/AddDirtoryResponse")]
        bool AddDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/DeleteDirtory", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/DeleteDirtoryResponse")]
        bool DeleteDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/UpdateDirtory", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/UpdateDirtoryResponse")]
        bool UpdateDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/FileService/GetDirtory", ReplyAction="Hch.iDisk.WCF.Contracts/FileService/GetDirtoryResponse")]
        iDiskClient.FileServices.Dirtory GetDirtory(iDiskClient.FileServices.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileServiceChannel : iDiskClient.FileServices.FileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<iDiskClient.FileServices.FileService>, iDiskClient.FileServices.FileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.AddFile(file, user);
        }
        
        public bool DeleteFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.DeleteFile(file, user);
        }
        
        public bool UpdateFile(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.UpdateFile(file, user);
        }
        
        public bool CheckFileById(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.CheckFileById(file, user);
        }
        
        public bool CheckFileByName(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.CheckFileByName(file, user);
        }
        
        public string GetUpLoadUrl(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.GetUpLoadUrl(file, user);
        }
        
        public string GetDownLoadUrl(iDiskClient.FileServices.File file, iDiskClient.FileServices.User user) {
            return base.Channel.GetDownLoadUrl(file, user);
        }
        
        public iDiskClient.FileServices.File[] QueryFiles(string where, iDiskClient.FileServices.User user) {
            return base.Channel.QueryFiles(where, user);
        }
        
        public iDiskClient.FileServices.File[] QueryFilesAdmin(string where, iDiskClient.FileServices.User user, int userId) {
            return base.Channel.QueryFilesAdmin(where, user, userId);
        }
        
        public iDiskClient.FileServices.File GetFile(string Id, iDiskClient.FileServices.User user) {
            return base.Channel.GetFile(Id, user);
        }
        
        public bool AddDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user) {
            return base.Channel.AddDirtory(dir, user);
        }
        
        public bool DeleteDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user) {
            return base.Channel.DeleteDirtory(dir, user);
        }
        
        public bool UpdateDirtory(iDiskClient.FileServices.Dirtory dir, iDiskClient.FileServices.User user) {
            return base.Channel.UpdateDirtory(dir, user);
        }
        
        public iDiskClient.FileServices.Dirtory GetDirtory(iDiskClient.FileServices.User user) {
            return base.Channel.GetDirtory(user);
        }
    }
}
