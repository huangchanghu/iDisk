//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace iDiskClient.UserServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _uemailField;
        
        private int _uidField;
        
        private string _uloginnameField;
        
        private string _upasswordField;
        
        private string _urealnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _uemail {
            get {
                return this._uemailField;
            }
            set {
                if ((object.ReferenceEquals(this._uemailField, value) != true)) {
                    this._uemailField = value;
                    this.RaisePropertyChanged("_uemail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _uid {
            get {
                return this._uidField;
            }
            set {
                if ((this._uidField.Equals(value) != true)) {
                    this._uidField = value;
                    this.RaisePropertyChanged("_uid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _uloginname {
            get {
                return this._uloginnameField;
            }
            set {
                if ((object.ReferenceEquals(this._uloginnameField, value) != true)) {
                    this._uloginnameField = value;
                    this.RaisePropertyChanged("_uloginname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _upassword {
            get {
                return this._upasswordField;
            }
            set {
                if ((object.ReferenceEquals(this._upasswordField, value) != true)) {
                    this._upasswordField = value;
                    this.RaisePropertyChanged("_upassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _urealname {
            get {
                return this._urealnameField;
            }
            set {
                if ((object.ReferenceEquals(this._urealnameField, value) != true)) {
                    this._urealnameField = value;
                    this.RaisePropertyChanged("_urealname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendTemp", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class FriendTemp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<bool> _confirmedField;
        
        private string _messageField;
        
        private int _receiverField;
        
        private int _senderidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<bool> _confirmed {
            get {
                return this._confirmedField;
            }
            set {
                if ((this._confirmedField.Equals(value) != true)) {
                    this._confirmedField = value;
                    this.RaisePropertyChanged("_confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _message {
            get {
                return this._messageField;
            }
            set {
                if ((object.ReferenceEquals(this._messageField, value) != true)) {
                    this._messageField = value;
                    this.RaisePropertyChanged("_message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _receiver {
            get {
                return this._receiverField;
            }
            set {
                if ((this._receiverField.Equals(value) != true)) {
                    this._receiverField = value;
                    this.RaisePropertyChanged("_receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _senderid {
            get {
                return this._senderidField;
            }
            set {
                if ((this._senderidField.Equals(value) != true)) {
                    this._senderidField = value;
                    this.RaisePropertyChanged("_senderid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendTempV", Namespace="http://schemas.datacontract.org/2004/07/Hch.iDisk.Model")]
    [System.SerializableAttribute()]
    public partial class FriendTempV : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool _confirmedField;
        
        private string _messageField;
        
        private int _receiverField;
        
        private string _receivernameField;
        
        private int _senderidField;
        
        private string _sendernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool _confirmed {
            get {
                return this._confirmedField;
            }
            set {
                if ((this._confirmedField.Equals(value) != true)) {
                    this._confirmedField = value;
                    this.RaisePropertyChanged("_confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _message {
            get {
                return this._messageField;
            }
            set {
                if ((object.ReferenceEquals(this._messageField, value) != true)) {
                    this._messageField = value;
                    this.RaisePropertyChanged("_message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _receiver {
            get {
                return this._receiverField;
            }
            set {
                if ((this._receiverField.Equals(value) != true)) {
                    this._receiverField = value;
                    this.RaisePropertyChanged("_receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _receivername {
            get {
                return this._receivernameField;
            }
            set {
                if ((object.ReferenceEquals(this._receivernameField, value) != true)) {
                    this._receivernameField = value;
                    this.RaisePropertyChanged("_receivername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _senderid {
            get {
                return this._senderidField;
            }
            set {
                if ((this._senderidField.Equals(value) != true)) {
                    this._senderidField = value;
                    this.RaisePropertyChanged("_senderid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _sendername {
            get {
                return this._sendernameField;
            }
            set {
                if ((object.ReferenceEquals(this._sendernameField, value) != true)) {
                    this._sendernameField = value;
                    this.RaisePropertyChanged("_sendername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Hch.iDisk.WCF.Contracts", ConfigurationName="UserServices.UserService")]
    public interface UserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/Register", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/RegisterResponse")]
        iDiskClient.UserServices.User Register(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/Login", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/LoginResponse")]
        iDiskClient.UserServices.User Login(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/UserExist", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/UserExistResponse")]
        bool UserExist(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/DeleteUser", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/DeleteUserResponse")]
        bool DeleteUser(iDiskClient.UserServices.User user, iDiskClient.UserServices.User admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/UpdateUser", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/UpdateUserResponse")]
        bool UpdateUser(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/QueryUsers", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/QueryUsersResponse")]
        iDiskClient.UserServices.User[] QueryUsers(string strWhere);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/QueryUserById", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/QueryUserByIdResponse")]
        iDiskClient.UserServices.User QueryUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/AddFrientTemp", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/AddFrientTempResponse")]
        bool AddFrientTemp(iDiskClient.UserServices.User owner, iDiskClient.UserServices.FriendTemp friendTemp);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/DeleteFriend", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/DeleteFriendResponse")]
        bool DeleteFriend(iDiskClient.UserServices.User owner, iDiskClient.UserServices.User friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/CheckFriends", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/CheckFriendsResponse")]
        iDiskClient.UserServices.FriendTempV[] CheckFriends(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/CheckFriendsRefused", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/CheckFriendsRefusedResponse")]
        iDiskClient.UserServices.FriendTempV[] CheckFriendsRefused(iDiskClient.UserServices.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/HandleFrind", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/HandleFrindResponse")]
        void HandleFrind(iDiskClient.UserServices.User user, iDiskClient.UserServices.FriendTempV friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="Hch.iDisk.WCF.Contracts/UserService/IsAdmin", ReplyAction="Hch.iDisk.WCF.Contracts/UserService/IsAdminResponse")]
        bool IsAdmin(iDiskClient.UserServices.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserServiceChannel : iDiskClient.UserServices.UserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<iDiskClient.UserServices.UserService>, iDiskClient.UserServices.UserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public iDiskClient.UserServices.User Register(iDiskClient.UserServices.User user) {
            return base.Channel.Register(user);
        }
        
        public iDiskClient.UserServices.User Login(iDiskClient.UserServices.User user) {
            return base.Channel.Login(user);
        }
        
        public bool UserExist(iDiskClient.UserServices.User user) {
            return base.Channel.UserExist(user);
        }
        
        public bool DeleteUser(iDiskClient.UserServices.User user, iDiskClient.UserServices.User admin) {
            return base.Channel.DeleteUser(user, admin);
        }
        
        public bool UpdateUser(iDiskClient.UserServices.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public iDiskClient.UserServices.User[] QueryUsers(string strWhere) {
            return base.Channel.QueryUsers(strWhere);
        }
        
        public iDiskClient.UserServices.User QueryUserById(int id) {
            return base.Channel.QueryUserById(id);
        }
        
        public bool AddFrientTemp(iDiskClient.UserServices.User owner, iDiskClient.UserServices.FriendTemp friendTemp) {
            return base.Channel.AddFrientTemp(owner, friendTemp);
        }
        
        public bool DeleteFriend(iDiskClient.UserServices.User owner, iDiskClient.UserServices.User friend) {
            return base.Channel.DeleteFriend(owner, friend);
        }
        
        public iDiskClient.UserServices.FriendTempV[] CheckFriends(iDiskClient.UserServices.User user) {
            return base.Channel.CheckFriends(user);
        }
        
        public iDiskClient.UserServices.FriendTempV[] CheckFriendsRefused(iDiskClient.UserServices.User user) {
            return base.Channel.CheckFriendsRefused(user);
        }
        
        public void HandleFrind(iDiskClient.UserServices.User user, iDiskClient.UserServices.FriendTempV friend) {
            base.Channel.HandleFrind(user, friend);
        }
        
        public bool IsAdmin(iDiskClient.UserServices.User user) {
            return base.Channel.IsAdmin(user);
        }
    }
}
